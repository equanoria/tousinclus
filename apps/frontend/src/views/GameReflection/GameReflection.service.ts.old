/* eslint-disable @typescript-eslint/no-explicit-any */
import type { IAnswer, IAnswerData } from '@tousinclus/types';
import { GameService } from '../../services/game/game.service';

export class GameReflectionService extends GameService {
  private answers: IAnswer[] = [];

  constructor(private readonly onUpdate: () => void) {
    super();
    this.socket.on('reflection-response', this.onReflectionResponse);

    this.retrieveAnswers();
  }

  updateAnswer(cardId: number, answer: IAnswerData) {
    const { code } = this;
    const data = {
      cardId,
      team: this.team,
      answer,
    };

    this.answers = this.answers.filter((answer) => answer.cardId === cardId)
    this.answers.push(data);

    this.socket.emit('reflection', {
      action: 'update-answer',
      code,
      data,
    });
  }

  retrieveAnswers() {
    this.socket.emit('reflection', {
      action: 'get-answers',
      code: this.code,
      team: this.team,
    });
  }

  // biome-ignore lint/suspicious/noExplicitAny: any
  private onReflectionResponse(data: any) {
    if (data.answers) {
      this.answers = data.answers;
      this.onUpdate();
    }
  }

  getAnswer(cardId: number) {
    return this.answers.filter((answer) => answer.cardId === cardId);
  }
}
